// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  userId                 Int             @id @default(autoincrement())
  firstName              String
  lastName               String
  phoneNumber            String          @unique
  baptismalName          String?
  profilePicture         String?
  password               String
  createdAt              DateTime        @default(now())
  deletedAt              DateTime?
  Post                   Post[]
  like                   Like[]
  comment                Comment[]
  memberships            GroupMember[]
  role                   Role            @relation(fields: [roleId], references: [roleId])
  roleId                 Int
  sentDirectMessages     DirectMessage[] @relation("MessageSender")
  receivedDirectMessages DirectMessage[] @relation("MessageReceiver")
  groupMessages          GroupMessage[]  @relation("GroupMessageSender")
}

model Post {
  postId      Int       @id @default(autoincrement())
  title       String
  description String
  picture     String?
  author      User      @relation(fields: [authorId], references: [userId])
  authorId    Int
  createdAt  DateTime @default(now())
  likes       Like[]
  comments    Comment[]
  group       Group?    @relation(fields: [groupId], references: [groupId])
  groupId     Int?
   @@index([authorId]) 
  @@index([createdAt]) 
}

model Like {
  likeId    Int       @id @default(autoincrement())
  post      Post      @relation(fields: [postId], references: [postId])
  postId    Int
  user      User      @relation(fields: [userId], references: [userId])
  userId    Int
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@unique([postId, userId])
}

model Comment {
  commentId Int       @id @default(autoincrement())
  post      Post      @relation(fields: [postId], references: [postId])
  postId    Int
  user      User      @relation(fields: [userId], references: [userId])
  userId    Int
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  message String
  @@index([postId])

}

model Group {
  groupId          Int            @id @default(autoincrement())
  groupName        String
  groupDescription String
  profilePicture   String?
  createdAt        DateTime       @default(now())
  deletedAt        DateTime?
  members          GroupMember[]
  message          GroupMessage[]
  post             Post[]
}

model GroupMember {
  GroupMemberId Int   @id @default(autoincrement())
  user          User  @relation(fields: [userId], references: [userId])
  userId        Int
  group         Group @relation(fields: [groupId], references: [groupId])
  groupId       Int

  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
}

model Role {
  roleId      Int          @id @default(autoincrement())
  roleName    String @unique
  description String
  createdAt   DateTime     @default(now())
  deletedAt   DateTime?
  user        User[]
  permissions  RolePermission[]
}

model Permission {
  permissionId   Int       @id @default(autoincrement())
  permissionName String @unique
  description    String
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?
  roles           RolePermission[]
}

model RolePermission{
  roleId Int
  permissionId Int
  role Role @relation(fields:[roleId], references:[roleId])
  permission Permission @relation(fields: [permissionId],references: [permissionId])
  createdAt DateTime @default(now())
@@id([roleId,permissionId])
  @@unique([permissionId,roleId])
}

model DirectMessage {
  messageId  Int       @id @default(autoincrement())
  sender     User      @relation("MessageSender", fields: [senderId], references: [userId])
  senderId   Int
  receiver   User      @relation("MessageReceiver", fields: [receiverId], references: [userId])
  receiverId Int
  message    String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?

  @@unique([senderId, receiverId])
}

model GroupMessage {
  messageId Int       @id @default(autoincrement())
  sender    User      @relation("GroupMessageSender", fields: [senderId], references: [userId])
  senderId  Int
  group     Group     @relation(fields: [groupId], references: [groupId])
  groupId   Int
  message   String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

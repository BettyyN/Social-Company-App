// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User{
  userId    Int @id @default(autoincrement())
  firstName String
  lastName String
  phoneNumber String @unique
  baptismalName String?
  profilePicture String?
  password String
  createdAt DateTime @default(now())
  deletedAt DateTime?
  role  String
  Post Post[]
}

model Post{
  postId  Int @id @default(autoincrement())
  title String
  description String
  picture String?
  author  User @relation(fields: [authorId], references: [userId])
  authorId Int
}

model Like{
  likeId Int @id @default(autoincrement())
  post Post @relation(fields:[posttId], references:[postId])
  posttId Int
  
}


// model Role {
//   id    Int      @id @default(autoincrement())
//   role  RoleType @unique @default(STUDENT)
//   users User[]
// }

// model Batch {
//   id        Int      @id @default(autoincrement())
//   name      String   @unique
//   startDate DateTime
//   endDate   DateTime
//   teams     Team[]
//   students  User[]
//   events    Event[]
// }

// model Team {
//   id        Int      @id @default(autoincrement())
//   name      String
//   stage     Stage    @default(BEGINNER)
//   batch     Batch    @relation(fields: [batchId], references: [id])
//   batchId   Int
//   members   User[]
//   posts     Post[]
//   chats     Chat[]
// }

// model Event {
//   id          Int       @id @default(autoincrement())
//   title       String
//   description String
//   type        EventType
//   date        DateTime
//   batch       Batch?    @relation(fields: [batchId], references: [id])
//   batchId     Int?
//   posts       Post[]
// }

// model Advertisement {
//   id          Int       @id @default(autoincrement())
//   title       String
//   description String
//   status      ModStatus @default(PENDING)
//   author      User      @relation(fields: [authorId], references: [id])
//   authorId    Int
//   createdAt   DateTime  @default(now())
// }

// model Post {
//   id          Int       @id @default(autoincrement())
//   title       String
//   content     String?
//   images      PostImage[]
//   type        PostType  @default(GENERAL)
//   author      User      @relation(fields: [authorId], references: [id])
//   authorId    Int
//   team        Team?     @relation(fields: [teamId], references: [id])
//   teamId      Int?
//   event       Event?    @relation(fields: [eventId], references: [id])
//   eventId     Int?
//   tags        UserTag[]
//   comments    Comment[]
//   likes       Like[]
//   createdAt   DateTime  @default(now())

// }

// model PostImage {
//   id   Int    @id @default(autoincrement())
//   url String
//   post Post  @relation(fields: [postId], references: [id])
//   postId Int
// }

// model UserTag {
//   id     Int  @id @default(autoincrement())
//   post   Post @relation(fields: [postId], references: [id])
//   postId Int
//   user   User @relation(fields: [userId], references: [id])
//   userId Int
// }

// model Comment {
//   id        Int      @id @default(autoincrement())
//   content   String
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
//   post      Post     @relation(fields: [postId], references: [id])
//   postId    Int
//   createdAt DateTime @default(now())
// }

// model Like {
//   id        Int      @id @default(autoincrement())
//   user      User     @relation(fields: [userId], references: [id])
//   userId    Int
//   post      Post     @relation(fields: [postId], references: [id])
//   postId    Int
//   createdAt DateTime @default(now())
// }

// model Notification {
//   id        Int      @id @default(autoincrement())
//   message   String
//   user      User     @relation(fields: [userId], references: [id])
//   userId    Int
//   createdAt DateTime @default(now())
//   read      Boolean  @default(false)
// }

// model Chat {
//   id        Int           @id @default(autoincrement())
//   name      String?
//   type      ChatType      @default(TEAM)
//   team      Team?         @relation(fields: [teamId], references: [id])
//   teamId    Int?
//   members   ChatMember[]
//   messages  Message[]
// }

// model ChatMember {
//   id     Int  @id @default(autoincrement())
//   user   User @relation(fields: [userId], references: [id])
//   userId Int
//   chat   Chat @relation(fields: [chatId], references: [id])
//   chatId Int
// }

// model Message {
//   id        Int      @id @default(autoincrement())
//   content   String
//   sender    User     @relation(fields: [senderId], references: [id], name: "SentMessages")
//   senderId  Int
//   receiver  User?    @relation(fields: [receiverId], references: [id], name: "ReceivedMessages")
//   receiverId Int?
//   chat      Chat     @relation(fields: [chatId], references: [id])
//   chatId    Int
//   createdAt DateTime @default(now())
// }

// // Enums
// enum RoleType {
//   STUDENT
//   TEACHER
//   ADMIN
//   OTHER
// }

// enum Stage {
//   BEGINNER
//   INTERMEDIATE
//   ADVANCED
// }

// enum EventType {
//   WEEKLY
//   MONTHLY
// }

// enum PostType {
//   GENERAL
//   TEAM
//   EVENT
// }

// enum ChatType {
//   TEAM
//   PRIVATE
// }

// enum ModStatus {
//   PENDING
//   APPROVED
//   REJECTED
// }
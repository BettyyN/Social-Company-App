// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String     @unique
  password    String
  phoneNumber String?   @unique
  positionId  Int?       
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  position    Position?  @relation(fields: [positionId], references: [id])
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  notifications Notification[]
  tasks       Task[]
  groupMembers GroupMember[]
}

model Position {  
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  userId    Int
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  userId    Int
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

model Task {
  id         Int      @id @default(autoincrement())
  title      String
  deadline   DateTime
  progress   String   @default("Pending") // Pending, In Progress, Completed
  userId     Int
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id])
}

model GroupMember {
  id      Int    @id @default(autoincrement())
  userId  Int
  groupId Int

  // Relations
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])
}

model Group {
  id      Int           @id @default(autoincrement())
  name    String
  members GroupMember[]
}
